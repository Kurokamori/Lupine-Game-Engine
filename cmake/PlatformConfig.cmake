# Auto-generated CMake configuration for Lupine Engine
# Generated by setup_build_environment.py

# Platform detection
set(LUPINE_PLATFORM "WINDOWS")
set(LUPINE_ARCH "x64")
set(LUPINE_TRIPLET "x64-windows-static")

# Third-party paths
set(THIRDPARTY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty")
set(PLATFORM_DIR "${THIRDPARTY_DIR}/Windows")

# Enable static linking
set(BUILD_SHARED_LIBS OFF)
set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")

# Compiler flags for static linking
if(MSVC)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    add_compile_options(/Zc:__cplusplus /permissive- /W4)
else()
    add_compile_options(-Wall -Wextra -Wpedantic)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

# Platform-specific configurations

# Windows-specific settings
set(VCPKG_DIR "${THIRDPARTY_DIR}/vcpkg")
if(EXISTS "${VCPKG_DIR}/scripts/buildsystems/vcpkg.cmake")
    set(CMAKE_TOOLCHAIN_FILE "${VCPKG_DIR}/scripts/buildsystems/vcpkg.cmake")
    set(VCPKG_TARGET_TRIPLET "${LUPINE_TRIPLET}")
    message(STATUS "Using vcpkg toolchain: ${CMAKE_TOOLCHAIN_FILE}")
endif()

# Windows system libraries
set(WINDOWS_SYSTEM_LIBS
    user32 gdi32 shell32 advapi32 kernel32 ws2_32 opengl32
    dwmapi uxtheme winmm imm32 wtsapi32 setupapi version
    netapi32 userenv crypt32 secur32 bcrypt
)

# Qt configuration
set(QT_DIR "${THIRDPARTY_DIR}/Qt")
list(APPEND CMAKE_PREFIX_PATH "${QT_DIR}")

# Qt static linking setup for all platforms
set(QT_VERSION "6.9.1")

if(WIN32)
    # Windows static Qt setup
    set(QT_STATIC_DIR "${QT_DIR}/${QT_VERSION}/win64_msvc2022_64")
    if(EXISTS "${QT_STATIC_DIR}")
        set(Qt6_DIR "${QT_STATIC_DIR}/lib/cmake/Qt6")
        list(APPEND CMAKE_PREFIX_PATH "${QT_STATIC_DIR}")
        add_compile_definitions(QT_STATIC_BUILD)
        message(STATUS "Using static Qt6 from: ${QT_STATIC_DIR}")
    else()
        # Fall back to vcpkg Qt
        set(QT_VCPKG_DIR "${PLATFORM_DIR}/qtbase_x64-windows-static")
        if(EXISTS "${QT_VCPKG_DIR}")
            set(Qt6_DIR "${QT_VCPKG_DIR}/share/Qt6")
            list(APPEND CMAKE_PREFIX_PATH "${QT_VCPKG_DIR}")
            add_compile_definitions(QT_STATIC_BUILD)
            message(STATUS "Using vcpkg Qt6 from: ${QT_VCPKG_DIR}")
        endif()
    endif()
elseif(APPLE)
    # macOS static Qt setup
    set(QT_STATIC_DIR "${QT_DIR}/${QT_VERSION}/clang_64")
    if(EXISTS "${QT_STATIC_DIR}")
        set(Qt6_DIR "${QT_STATIC_DIR}/lib/cmake/Qt6")
        list(APPEND CMAKE_PREFIX_PATH "${QT_STATIC_DIR}")
        message(STATUS "Using static Qt6 from: ${QT_STATIC_DIR}")
    else()
        # Fall back to Homebrew Qt
        set(QT_BREW_DIR "/opt/homebrew/opt/qt6")
        if(NOT EXISTS "${QT_BREW_DIR}")
            set(QT_BREW_DIR "/usr/local/opt/qt6")
        endif()
        if(EXISTS "${QT_BREW_DIR}")
            list(APPEND CMAKE_PREFIX_PATH "${QT_BREW_DIR}")
            message(STATUS "Using Homebrew Qt6 from: ${QT_BREW_DIR}")
        endif()
    endif()
elseif(UNIX AND NOT APPLE)
    # Linux static Qt setup
    set(QT_STATIC_DIR "${QT_DIR}/${QT_VERSION}/gcc_64")
    if(EXISTS "${QT_STATIC_DIR}")
        set(Qt6_DIR "${QT_STATIC_DIR}/lib/cmake/Qt6")
        list(APPEND CMAKE_PREFIX_PATH "${QT_STATIC_DIR}")
        message(STATUS "Using static Qt6 from: ${QT_STATIC_DIR}")
    else()
        # Fall back to current symlink or system Qt
        set(QT_CURRENT_DIR "${QT_DIR}/current")
        if(EXISTS "${QT_CURRENT_DIR}")
            list(APPEND CMAKE_PREFIX_PATH "${QT_CURRENT_DIR}")
            message(STATUS "Using Qt6 from: ${QT_CURRENT_DIR}")
        endif()
    endif()
endif()

# Emscripten configuration
set(EMSDK_DIR "${THIRDPARTY_DIR}/emsdk")
if(EXISTS "${EMSDK_DIR}")
    list(APPEND CMAKE_PREFIX_PATH "${EMSDK_DIR}")
endif()

# Library search paths
list(APPEND CMAKE_PREFIX_PATH "${PLATFORM_DIR}")

# Add all platform-specific package directories
if(EXISTS "${PLATFORM_DIR}")
    file(GLOB PLATFORM_PACKAGES "${PLATFORM_DIR}/*")
    foreach(package IN LISTS PLATFORM_PACKAGES)
        if(IS_DIRECTORY "${package}")
            list(APPEND CMAKE_PREFIX_PATH "${package}")
        endif()
    endforeach()
endif()

# Export functionality
option(LUPINE_ENABLE_EXPORT "Enable cross-platform export functionality" ON)
if(LUPINE_ENABLE_EXPORT)
    add_compile_definitions(
        LUPINE_EMBED_WINDOWS_LIBRARIES
        LUPINE_EMBED_LINUX_LIBRARIES
        LUPINE_EMBED_MACOS_LIBRARIES
        LUPINE_EMBED_ARM64_LIBRARIES
    )
endif()

# Debug information
message(STATUS "Lupine Platform: ${LUPINE_PLATFORM}")
message(STATUS "Lupine Architecture: ${LUPINE_ARCH}")
message(STATUS "Platform Directory: ${PLATFORM_DIR}")
message(STATUS "Third-party Directory: ${THIRDPARTY_DIR}")
