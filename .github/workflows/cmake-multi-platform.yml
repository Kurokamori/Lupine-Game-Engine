name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows (MSVC)
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release

          # Linux (GCC)
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Release

          # Linux (Clang)
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release

          # macOS universal (x86_64 + arm64)
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release

    steps:
      - uses: actions/checkout@v4

      - name: Set build directory
        run: echo "BUILD_DIR=${{ github.workspace }}/build" >> $GITHUB_ENV
        shell: bash

      # <––– NEW: on Windows only, add your Qt6 static build's bin folder to PATH 
      - name: Add Qt tools to PATH (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "${{ github.workspace }}/thirdparty/Windows/qtbase_x64-windows-static/bin" >> $GITHUB_PATH
        shell: bash

      - name: Configure CMake (Windows & Linux & macOS)
        run: |
          cmake -S . -B "$BUILD_DIR" \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DTHIRDPARTY_DIR="${{ github.workspace }}/thirdparty" \
            $([[ "${{ matrix.os }}" == "windows-latest" ]] && echo "-DCMAKE_PREFIX_PATH=${{ github.workspace }}/thirdparty/Windows/qtbase_x64-windows-static") \
            $([[ "${{ matrix.os }}" == "macos-latest" ]] && echo "-DCMAKE_OSX_ARCHITECTURES=\"x86_64;arm64\"")
        shell: bash

      - name: Build
        run: cmake --build "$BUILD_DIR" --config ${{ matrix.build_type }}
        shell: bash

      - name: Test
        run: |
          cd "$BUILD_DIR"
          ctest --output-on-failure -C ${{ matrix.build_type }}
        shell: bash
